*notifier.nvim* Smart notification system for Neovim
*Notifier*

Features:
 - Multiple notification groups with configurable positioning
 - Custom formatters for notifications and history
 - Timeout-based automatic dismissal
 - Virtual text rendering with highlights
 - Notification history viewer
 - ID-based notification updating
 - Configurable padding and styling

# Setup ~

This module needs to be set up with `require('notifier').setup({})` (replace
`{}` with your `config` table).

# Highlighting ~

Plugin defines several highlight groups:
 - `NotifierNormal` - for notification floating window (linked to `NormalFloat`)
 - `NotifierBorder` - for notification floating window border (linked to `FloatBorder`)
 - `NotifierTitle` - for notification floating window title (linked to `FloatTitle`)
 - `NotifierError` - for notifications with level `ERROR` (linked to `ErrorMsg`)
 - `NotifierWarn` - for notifications with level `WARN` (linked to `WarningMsg`)
 - `NotifierInfo` - for notifications with level `INFO` (linked to `MoreMsg`)
 - `NotifierDebug` - for notifications with level `DEBUG` (linked to `Debug`)
 - `NotifierTrace` - for notifications with level `TRACE` (linked to `Comment`)
 - `NotifierHistoryNormal` - for notification history floating window (linked to `NormalFloat`)
 - `NotifierHistoryBorder` - for notification history floating window border (linked to `FloatBorder`)
 - `NotifierHistoryTitle` - for notification history floating window title (linked to `FloatTitle`)

To change any highlight group, modify it directly with |:highlight|.


==============================================================================
Table of Contents                                            *notifier.contents*

Setup ························································· |notifier.setup|
Configuration ················································ |notifier.config|
Commands ··················································· |notifier.commands|
Types ························································· |notifier.types|
Public API ··················································· |notifier.public|

==============================================================================
Setup                                                           *notifier.setup*

# Module setup ~

>lua
   require('notifier').setup() -- use default config
   -- OR
   require('notifier').setup({}) -- replace {} with your config table
<

see also |notifier.setup()|

==============================================================================
Configuration                                                  *notifier.config*

# Module config ~

Default values:
{
  default_timeout = 3000,
  resize_debounce_ms = 150,
  border = "none",
  winblend = 0,
  padding = { top = 0, right = 0, bottom = 0, left = 0 },
  default_group = "bottom-right",
  group_configs = {
    ["top-left"] = {
      anchor = "NW",
      row = function()
        return 0
      end,
      col = function()
        return 0
      end,
    },
    ["top-center"] = {
      anchor = "NW",
      row = function()
        return 0
      end,
      col = function()
        return vim.o.columns / 2
      end,
      center_mode = "horizontal", -- Center horizontally only
    },
    ["top-right"] = {
      anchor = "NE",
      row = function()
        return 0
      end,
      col = function()
        return vim.o.columns
      end,
    },
    ["left-center"] = {
      anchor = "NW",
      row = function()
        return vim.o.lines / 2
      end,
      col = function()
        return 0
      end,
      center_mode = "vertical", -- Center vertically only
    },
    ["center"] = {
      anchor = "NW",
      row = function()
        return vim.o.lines / 2
      end,
      col = function()
        return vim.o.columns / 2
      end,
      center_mode = "true", -- Center both horizontally and vertically
    },
    ["right-center"] = {
      anchor = "NE",
      row = function()
        return vim.o.lines / 2
      end,
      col = function()
        return vim.o.columns
      end,
      center_mode = "vertical", -- Center vertically only
    },
    ["bottom-left"] = {
      anchor = "SW",
      row = function()
        return vim.o.lines - 2
      end,
      col = function()
        return 0
      end,
    },
    ["bottom-center"] = {
      anchor = "SW",
      row = function()
        return vim.o.lines - 2
      end,
      col = function()
        return vim.o.columns / 2
      end,
      center_mode = "horizontal", -- Center horizontally only
    },
    ["bottom-right"] = {
      anchor = "SE",
      row = function()
        return vim.o.lines - 2
      end,
      col = function()
        return vim.o.columns
      end,
    },
  },
  width = {
    min_width = 20, -- Minimum notification width
    max_width = nil, -- Maximum width (nil = auto-calculate)
    preferred_width = 50, -- Preferred width when content fits
    max_width_percentage = 0.4, -- Maximum width as percentage of screen
    adaptive = true, -- Automatically adjust width based on content
    wrap_text = true, -- Enable text wrapping for long lines
    wrap_at_words = true, -- Wrap at word boundaries when possible
  },
  icons = {
    [vim.log.levels.TRACE] = "󰔚 ",
    [vim.log.levels.DEBUG] = " ",
    [vim.log.levels.INFO] = " ",
    [vim.log.levels.WARN] = " ",
    [vim.log.levels.ERROR] = " ",
  },
  notif_formatter = U.default_notif_formatter,
  notif_history_formatter = U.default_notif_history_formatter,
  animation = {
    enabled = false,
    fade_in_duration = 300,
    fade_out_duration = 300,
  },
}

## Group positioning ~

Configure different notification groups for various positions:
>lua
   require('notifier').setup({
     group_configs = {
       ["bottom-right"] = {
         anchor = "SE",
         row = function() return vim.o.lines - 2 end,
         col = function() return vim.o.columns end,
         winblend = 20,
       },
       ["top-center"] = {
         anchor = "N",
         row = function() return 1 end,
         col = function() return vim.o.columns / 2 end,
         winblend = 0,
       }
     }
   })
<

## Custom formatters ~

Override default notification formatting:
>lua
   require('notifier').setup({
     notif_formatter = function(opts)
       return {
         { display_text = "[CUSTOM] " .. opts.line, hl_group = "Special", is_virtual = true }
       }
     end
   })
<

## Timeout configuration ~

Set global and per-notification timeouts:
>lua
   require('notifier').setup({
     default_timeout = 5000, -- 5 seconds default
   })

   -- Per-notification timeout
   vim.notify("Long message", vim.log.levels.INFO, { timeout = 10000 })
<

==============================================================================
Commands                                                     *notifier.commands*

                                                              *:NotifierHistory*
# Show notification history ~

Display all active notifications in a floating window with timestamps
and enhanced formatting.

>vim
   :NotifierHistory    " Show notification history
<

                                                              *:NotifierDismiss*
# Dismiss all active notifications immediately or with animation ~

Immediately close all active notification windows or animate them out.

>vim
   :NotifierDismiss    " Dismiss all notifications
   :NotifierDismiss stagger=50 animated    " Dismiss all notifications with stagger and animation
   :NotifierDismiss immediate    " Dismiss all notifications immediately
<

==============================================================================
Types                                                           *notifier.types*

Notifier.Notification                    *notifier.public.Notifier.Notification*
    Represents a single notification entry with display and metadata information.

    Fields: ~
        {id?}                     (string|number)                                                               Unique identifier for updating existing notifications
        {msg?}                    (string)                                                                      Message content to display (can contain newlines)
        {icon?}                   (string)                                                                      Custom icon to display (overrides default level icons)
        {level?}                  (integer)                                                                     Log level from vim.log.levels (defaults to INFO)
        {timeout?}                (integer)                                                                     Timeout in milliseconds before auto-dismissal, set to 0 for no timeout
        {created_at?}             (number)                                                                      Unix timestamp when notification was first created
        {updated_at?}             (number)                                                                      Unix timestamp when notification was last updated
        {hl_group?}               (string)                                                                      Custom highlight group for the notification text
        {group_name?}             (Notifier.GroupConfigsKey)                                                    Target group for positioning
        {_expired?}               (boolean)                                                                     Internal flag marking notification as expired
        {_notif_formatter?}       (fun(opts:Notifier.NotificationFormatterOpts):Notifier.FormattedNotifOpts[])  Custom formatter
        {_notif_formatter_data?}  (table)                                                                       Arbitrary data passed to custom formatter
        {_animating?}             (boolean)                                                                     Internal flag marking notification as animating
        {_animation_alpha?}       (number)                                                                      Animation alpha value (0-1)


Notifier.Group                                  *notifier.public.Notifier.Group*
    Internal group state management for notification positioning.

    Fields: ~
        {name}           (string)                   Group identifier matching config keys
        {buf}            (integer)                  Buffer handle for the floating window
        {win}            (integer)                  Window handle for the notification display
        {notifications}  (Notifier.Notification[])  Array of all notifications in this group
        {config}         (Notifier.GroupConfigs)    Configuration settings for this group


Notifier.GroupConfigsKey              *notifier.public.Notifier.GroupConfigsKey*

    Variants: ~
        ("bottom-right")
        ("top-right")
        ("top-left")
        ("bottom-left")
        ("center")
        ("top-center")
        ("bottom-center")
        ("left-center")
        ("right-center")


Notifier.GroupConfigs                    *notifier.public.Notifier.GroupConfigs*
    Group positioning and display configuration.

    Fields: ~
        {anchor}        ("NW"|"NE"|"SW"|"SE")             Window anchor point for positioning
        {row}           (fun():integer)                   Row position relative to the editor
        {col}           (fun():integer)                   Column position relative to the editor
        {_cached_row?}  (integer)                         Cached row position relative to the editor, for internal use only
        {_cached_col?}  (integer)                         Cached column position relative to the editor, for internal use only
        {winblend?}     (integer)                         Window transparency (0-100, default: 0)
        {center_mode?}  ("true"|"horizontal"|"vertical")  Enable center positioning calculations


Notifier.Config.Padding                *notifier.public.Notifier.Config.Padding*
    Padding configuration for notification windows.

    Fields: ~
        {top?}     (integer)  Top padding in characters (default: 0)
        {right?}   (integer)  Right padding in characters (default: 0)
        {bottom?}  (integer)  Bottom padding in characters (default: 0)
        {left?}    (integer)  Left padding in characters (default: 0)


                                   *notifier.public.Notifier.FormattedNotifOpts*
Notifier.FormattedNotifOpts
    Raw formatted notification piece before position computation.

    Fields: ~
        {display_text}  (string)   The text content to display
        {hl_group?}     (string)   Highlight group to apply to this text segment
        {is_virtual?}   (boolean)  Whether this text should be rendered as virtual text


                                     *notifier.public.Notifier.ComputedLineOpts*
Notifier.ComputedLineOpts : Notifier.FormattedNotifOpts
    Computed line piece with calculated positions for rendering.

    Fields: ~
        {col_start?}          (number)  Starting column position (0-indexed)
        {col_end?}            (number)  Ending column position (0-indexed)
        {virtual_col_start?}  (number)  Starting virtual column position
        {virtual_col_end?}    (number)  Ending virtual column position


                            *notifier.public.Notifier.NotificationFormatterOpts*
Notifier.NotificationFormatterOpts
    Parameters passed to notification formatter functions.

    Fields: ~
        {notif}          (Notifier.Notification)  The notification being formatted
        {line}           (string)                 Current line of the notification message
        {config}         (Notifier.Config)        Current plugin configuration
        {log_level_map}  (Notifier.LogLevelMap)   Log level to display property mapping


Notifier.LogLevelEntry                  *notifier.public.Notifier.LogLevelEntry*
    Mapping of log level to display properties.

    Fields: ~
        {level_key}  (string)  String representation of the level
        {hl_group}   (string)  Default highlight group for this level


Notifier.LogLevelMap                      *notifier.public.Notifier.LogLevelMap*

    Type: ~
        table<integer,Notifier.LogLevelEntry>


Notifier.Config                                *notifier.public.Notifier.Config*
    Main plugin configuration table.

    Fields: ~
        {default_timeout?}          (integer)                                                                     Default timeout in milliseconds (default: 3000)
        {resize_debounce_ms?}       (integer)                                                                     Debounce time for window resize events (default: 150)
        {border?}                   (string)                                                                      Border style for floating windows (default: "none")
        {winblend?}                 (integer)                                                                     Window transparency (0-100, default: 0)
        {icons?}                    (table<integer,string>)                                                       Icons for each log level (keys are vim.log.levels values)
        {notif_formatter?}          (fun(opts:Notifier.NotificationFormatterOpts):Notifier.FormattedNotifOpts[])  Function to format live notifications
        {notif_history_formatter?}  (fun(opts:Notifier.NotificationFormatterOpts):Notifier.FormattedNotifOpts[])  Function to format notifications in history view
        {padding?}                  (Notifier.Config.Padding)                                                     Padding configuration for notification windows
        {default_group?}            (Notifier.GroupConfigsKey)                                                    Default group for notifications without explicit group
        {group_configs?}            (table<Notifier.GroupConfigsKey,Notifier.GroupConfigs>)                       Configuration for each notification group
        {animation?}                (Notifier.Config.Animation)                                                   Animation configuration
        {width?}                    (Notifier.Config.Width)                                                       Width configuration


Notifier.Config.Width                    *notifier.public.Notifier.Config.Width*

    Fields: ~
        {min_width?}             (integer)  Minimum notification width (default: 20)
        {max_width?}             (integer)  Maximum width (nil = auto-calculate) (default: nil)
        {preferred_width?}       (integer)  Preferred width when content fits (default: 50)
        {max_width_percentage?}  (number)   Maximum width as percentage of screen (default: 0.4)
        {adaptive?}              (boolean)  Automatically adjust width based on content (default: true)
        {wrap_text?}             (boolean)  Enable text wrapping for long lines (default: true)
        {wrap_at_words?}         (boolean)  Wrap at word boundaries when possible (default: true)


                                     *notifier.public.Notifier.Config.Animation*
Notifier.Config.Animation
    Animation configuration.

    Fields: ~
        {enabled?}            (boolean)  Whether animations are enabled (default: false)
        {fade_in_duration?}   (integer)  Duration of fade in animations in milliseconds (default: 300)
        {fade_out_duration?}  (integer)  Duration of fade out animations in milliseconds (default: 300)


Notifier.AnimationState                *notifier.public.Notifier.AnimationState*
    Animation state for notifications

    Fields: ~
        {notification}  (Notifier.Notification)  Reference to the notification
        {start_time}    (number)                 Animation start timestamp
        {duration}      (number)                 Animation duration in milliseconds
        {type}          (string)                 Animation type ('fade_out')
        {progress}      (number)                 Current progress (0-1)
        {completed}     (boolean)                Whether animation is complete


==============================================================================
Public API                                                     *notifier.public*

                                                              *notifier.setup()*
M.setup({user_config?})                                  *notifier.public.setup*
    Setup the notifier plugin with user configuration

    Parameters: ~
        {user_config?}  (Notifier.Config)  User configuration to merge with defaults

    Returns: ~
        (nil)


                                                             *notifier.notify()*
M.notify({msg}, {level?}, {opts?})                      *notifier.public.notify*
    Enhanced vim.notify replacement with group and formatting support

    Parameters: ~
        {msg}     (string)                 Message content to display
        {level?}  (integer)                Log level (vim.log.levels.ERROR, WARN, INFO, DEBUG, TRACE)
        {opts?}   (Notifier.Notification)  Additional notification options

    Returns: ~
        (nil)


                                                       *notifier.show_history()*
M.show_history()                                  *notifier.public.show_history*
    Display notification history in a floating window

    Returns: ~
        (nil)


                                                        *notifier.dismiss_all()*
M.dismiss_all({opts?})                             *notifier.public.dismiss_all*
    Dismiss all active notifications immediately

    Parameters: ~
        {opts?}  (boolean|{animated?:boolean,stagger?:number})  Options for dismissal

    Returns: ~
        (nil)


M.formatters                                        *notifier.public.formatters*
    Built-in formatters for notifications

    Type: ~
        (table)


vim:tw=78:ts=8:noet:ft=help:norl:
