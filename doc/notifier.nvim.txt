*notifier.nvim* Smart notification system for Neovim
*Notifier*

Features:
 - Multiple notification groups with configurable positioning
 - Custom formatters for notifications and history
 - Timeout-based automatic dismissal
 - Virtual text rendering with highlights
 - Notification history viewer
 - ID-based notification updating
 - Configurable padding and styling

# Setup ~

This module needs to be explicitly set up with `require('notifier').setup({})`.
It will replace `vim.notify` with enhanced functionality.

# Highlighting ~

Plugin defines several highlight groups:
 - `NotifierNormal` - for notification floating window (linked to `NormalFloat`)
 - `NotifierBorder` - for notification floating window border (linked to `FloatBorder`)
 - `NotifierTitle` - for notification floating window title (linked to `FloatTitle`)
 - `NotifierError` - for notifications with level `ERROR` (linked to `ErrorMsg`)
 - `NotifierWarn` - for notifications with level `WARN` (linked to `WarningMsg`)
 - `NotifierInfo` - for notifications with level `INFO` (linked to `MoreMsg`)
 - `NotifierDebug` - for notifications with level `DEBUG` (linked to `Debug`)
 - `NotifierTrace` - for notifications with level `TRACE` (linked to `Comment`)
 - `NotifierHistoryNormal` - for notification history floating window (linked to `NormalFloat`)
 - `NotifierHistoryBorder` - for notification history floating window border (linked to `FloatBorder`)
 - `NotifierHistoryTitle` - for notification history floating window title (linked to `FloatTitle`)

To change any highlight group, modify it directly with |:highlight|.
<

==============================================================================
Table of Contents                                            *notifier.contents*

Setup ························································· |notifier.setup|
Configuration ················································ |notifier.config|
API ····························································· |notifier.api|

==============================================================================
Setup                                                           *notifier.setup*

==============================================================================

                                                              *Notifier.setup()*
                                                                *Notifier-setup*
# Module setup ~

>lua
  require('notifier').setup() -- use default config
  -- OR
  require('notifier').setup({}) -- replace {} with your config table
<

==============================================================================
Configuration                                                  *notifier.config*

==============================================================================

                                                               *Notifier.config*
# Module config ~

Default values:
{
  default_timeout = 3000, -- milliseconds
  border = "none",
  padding = { top = 0, right = 0, bottom = 0, left = 0 },
  default_group = "bottom-right",
  group_configs = {
    ["bottom-right"] = {
      anchor = "SE",
      row = vim.o.lines - 2,
      col = vim.o.columns,
      winblend = 0,
    },
    ["top-right"] = {
      anchor = "NE",
      row = 0,
      col = vim.o.columns,
      winblend = 0,
    },
    ["top-left"] = {
      anchor = "NW",
      row = 0,
      col = 0,
      winblend = 0,
    },
    ["bottom-left"] = {
      anchor = "SW",
      row = vim.o.lines - 2,
      col = 0,
      winblend = 0,
    },
  },
  icons = {
    [vim.log.levels.TRACE] = "󰔚 ",
    [vim.log.levels.DEBUG] = " ",
    [vim.log.levels.INFO] = " ",
    [vim.log.levels.WARN] = " ",
    [vim.log.levels.ERROR] = " ",
  },
  notif_formatter = U.default_notif_formatter,
  notif_history_formatter = U.default_notif_history_formatter,
}

==============================================================================
API                                                               *notifier.api*

==============================================================================

                                                                      *Notifier*
                                                                 *notifier-main*
Notifier                                                 *notifier.api.Notifier*
    Main module table


Notifier.Notification                       *notifier.api.Notifier.Notification*
    ---------------------------------------------------------------
    Notification object containing all display and metadata information

    Fields: ~
        {id?}                     (string|number)                                                               Unique identifier for the notification. Allows updating existing notifications.
        {msg?}                    (string)                                                                      The message content to display. Can contain newlines or be empty if using custom formatter.
        {icon?}                   (string)                                                                      Custom icon to display with the notification. Overrides default level icons.
        {level?}                  (integer)                                                                     Log level (vim.log.levels.ERROR, WARN, INFO, DEBUG, TRACE). Defaults to INFO.
        {timeout?}                (integer)                                                                     Timeout in milliseconds before auto-dismissal. Defaults to config.default_timeout.
        {created_at?}             (number)                                                                      Unix timestamp (seconds) when notification was first created.
        {updated_at?}             (number)                                                                      Unix timestamp (seconds) when notification was last updated.
        {hl_group?}               (string)                                                                      Custom highlight group for the notification text.
        {_expired?}               (boolean)                                                                     Internal flag marking notification as expired during cleanup.
        {_notif_formatter?}       (fun(opts:Notifier.NotificationFormatterOpts):Notifier.FormattedNotifOpts[])  Custom formatter function for this specific notification.
        {_notif_formatter_data?}  (table)                                                                       Arbitrary data passed to the custom formatter function.


                                       *notifier.api.Notifier.NotificationGroup*
Notifier.NotificationGroup : Notifier.Notification
    Extended notification with group configuration

    Fields: ~
        {group_name?}  (Notifier.GroupConfigsKey)  Target group for positioning this notification.


Notifier.Group                                     *notifier.api.Notifier.Group*
    Internal group state management

    Fields: ~
        {name}           (string)                   Group identifier matching config keys.
        {buf}            (integer)                  Buffer handle for the floating window.
        {win}            (integer)                  Window handle for the notification display.
        {notifications}  (Notifier.Notification[])  Array of all notifications in this group.
        {config}         (Notifier.GroupConfigs)    Configuration settings for this group.


Notifier.LogLevelKey                         *notifier.api.Notifier.LogLevelKey*
    Mapping of log levels to display properties

    Variants: ~
        ("ERROR")
        ("WARN")
        ("INFO")
        ("DEBUG")
        ("TRACE")


Notifier.LogLevelEntry                     *notifier.api.Notifier.LogLevelEntry*
    Log level configuration mapping

    Fields: ~
        {level_key}  (Notifier.LogLevelKey)  String representation of the level.
        {hl_group}   (string)                Default highlight group for this level.


Notifier.LogLevelMap                         *notifier.api.Notifier.LogLevelMap*
    Complete log level mapping table

    Type: ~
        table<integer,Notifier.LogLevelEntry>


Notifier.Config.Padding                   *notifier.api.Notifier.Config.Padding*
    Padding configuration for notification windows

    Fields: ~
        {top?}     (integer)  Top padding in characters. Default: 0.
        {right?}   (integer)  Right padding in characters. Default: 0.
        {bottom?}  (integer)  Bottom padding in characters. Default: 0.
        {left?}    (integer)  Left padding in characters. Default: 0.


Notifier.GroupConfigsKey                 *notifier.api.Notifier.GroupConfigsKey*
    Available notification group positions

    Variants: ~
        ("bottom-right")
        ("top-right")
        ("top-left")
        ("bottom-left")


Notifier.GroupConfigs                       *notifier.api.Notifier.GroupConfigs*
    Group positioning and display configuration

    Fields: ~
        {anchor}     ("NW"|"NE"|"SW"|"SE")  Window anchor point for positioning.
        {row}        (integer)              Row position relative to the editor.
        {col}        (integer)              Column position relative to the editor.
        {winblend?}  (integer)              Window transparency (0-100). Default: 0.


Notifier.FormattedNotifOpts           *notifier.api.Notifier.FormattedNotifOpts*
    Raw formatted notification piece before computation

    Fields: ~
        {display_text}  (string)   The text content to display.
        {hl_group?}     (string)   Highlight group to apply to this text segment.
        {is_virtual?}   (boolean)  Whether this text should be rendered as virtual text. Default: false.


                                        *notifier.api.Notifier.ComputedLineOpts*
Notifier.ComputedLineOpts : Notifier.FormattedNotifOpts
    Computed line piece with calculated positions

    Fields: ~
        {col_start?}          (number)  Starting column position (0-indexed). Calculated internally.
        {col_end?}            (number)  Ending column position (0-indexed). Calculated internally.
        {virtual_col_start?}  (number)  Starting virtual column position. Calculated internally.
        {virtual_col_end?}    (number)  Ending virtual column position. Calculated internally.


                               *notifier.api.Notifier.NotificationFormatterOpts*
Notifier.NotificationFormatterOpts
    Parameters passed to notification formatter functions

    Fields: ~
        {notif}          (Notifier.Notification)  The notification being formatted.
        {line}           (string)                 Current line of the notification message.
        {config}         (Notifier.Config)        Current plugin configuration.
        {log_level_map}  (Notifier.LogLevelMap)   Log level to display property mapping.


Notifier.Config                                   *notifier.api.Notifier.Config*
    Main plugin configuration

    Fields: ~
        {default_timeout?}          (integer)                                                                     Default timeout in milliseconds for notifications. Default: 3000.
        {border?}                   (string)                                                                      Border style for floating windows. Any valid nvim_open_win border. Default: "none".
        {icons?}                    (table<integer,string>)                                                       Icons for each log level. Keys are vim.log.levels values.
        {notif_formatter?}          (fun(opts:Notifier.NotificationFormatterOpts):Notifier.FormattedNotifOpts[])  Function to format live notifications.
        {notif_history_formatter?}  (fun(opts:Notifier.NotificationFormatterOpts):Notifier.FormattedNotifOpts[])  Function to format notifications in history view.
        {padding?}                  (Notifier.Config.Padding)                                                     Padding configuration for notification windows.
        {default_group?}            (Notifier.GroupConfigsKey)                                                    Default group for notifications without explicit group.
        {group_configs?}            (table<Notifier.GroupConfigsKey,Notifier.GroupConfigs>)                       Configuration for each notification group.


                                                           *notifier.api.notify*
Notifier.notify({msg}, {level?}, {opts?})
    ---------------------------------------------------------------
    Enhanced vim.notify replacement with group and formatting support

    Displays notifications with advanced features like grouping, custom formatting,
    and ID-based updating. Replaces existing notifications with matching IDs.

    # Parameters ~

     • {msg} (string) Message content, can contain newlines
     • {level} (integer, optional) Log level from vim.log.levels
     • {opts} (Notifier.NotificationGroup, optional) Additional options:
       - {id}: Unique identifier for updating existing notifications
       - {timeout}: Custom timeout in milliseconds
       - {icon}: Override default level icon
       - {hl_group}: Custom highlight group
       - {group_name}: Target notification group for positioning
       - {_notif_formatter}: Custom formatter function for this notification
       - {_notif_formatter_data}: Data passed to custom formatter


    Parameters: ~
        {msg}     (string)                      Message content to display
        {level?}  (integer)                     Log level (vim.log.levels.ERROR, WARN, INFO, DEBUG, TRACE)
        {opts?}   (Notifier.NotificationGroup)  Additional notification options

    Returns: ~
        (nil)

    Usage: ~
>lua
           -- Basic notification
           require('notifier').notify("Hello world!")

           -- With custom options
           require('notifier').notify("Warning message", vim.log.levels.WARN, {
             id = "my-warning",
             timeout = 5000,
             group_name = "top-right"
           })

           -- Update existing notification
           require('notifier').notify("Updated message", vim.log.levels.INFO, {
             id = "my-warning"  -- Same ID updates the previous notification
           })
<


Notifier.show_history()                              *notifier.api.show_history*
    Display notification history in a floating window

    Shows all currently active notifications across all groups in chronological order
    with enhanced formatting including timestamps and level indicators.

    # Features ~
     • Scrollable floating window with all active notifications
     • Chronological ordering (oldest to newest)
     • Enhanced formatting with timestamps and log levels
     • Keyboard shortcuts for closing (Esc, q, Ctrl-C)
     • Auto-close when window loses focus


    Usage: ~
>lua
        require('notifier').show_history()
<


Notifier.dismiss_all()                                *notifier.api.dismiss_all*
    Dismiss all active notifications immediately

    Closes all notification windows and clears their buffers across all groups.
    This provides an immediate way to clear the screen of notifications.


    Usage: ~
>lua
        require('notifier').dismiss_all()
<


                                                               *Notifier.config*
Notifier.config                                            *notifier.api.config*
    Current plugin configuration

    Type: ~
        (Notifier.Config)


                                                             *Notifier.defaults*
Notifier.defaults                                        *notifier.api.defaults*
    Default configuration values

    Type: ~
        (Notifier.Config)


                                                              *Notifier.setup()*
Notifier.setup({user_config?})                              *notifier.api.setup*
    Setup the notifier plugin with user configuration

    Initializes the plugin with merged default and user configurations,
    validates all settings, creates highlight groups, replaces vim.notify,
    and starts the cleanup timer for automatic notification expiration.


    Parameters: ~
        {user_config?}  (Notifier.Config)  User configuration to merge with defaults

    Returns: ~
        (nil)

    Usage: ~
>lua
           -- Minimal setup
           require('notifier').setup()

           -- Custom configuration
           require('notifier').setup({
             default_timeout = 5000,
             border = "rounded",
             padding = { top = 1, right = 2, bottom = 1, left = 2 },
             group_configs = {
               ["bottom-right"] = {
                 anchor = "SE",
                 row = vim.o.lines - 3,
                 col = vim.o.columns - 1,
                 winblend = 20,
               }
             },
             icons = {
               [vim.log.levels.ERROR] = "✗ ",
               [vim.log.levels.WARN] = "⚠ ",
               [vim.log.levels.INFO] = "ℹ ",
             }
           })
<


vim:tw=78:ts=8:noet:ft=help:norl:
